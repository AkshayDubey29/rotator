rotator:
  image:
    repository: your-registry/rotator  # Update with your registry
    tag: v1.1.0                       # Updated version with metrics fixes
    pullPolicy: IfNotPresent
  
  # Metrics configuration - IMPORTANT for Mimir integration  
  metrics:
    port: 9090                        # PRODUCTION: Use port 9090 (matches your environment)
    # Your cluster uses port 9090 for metrics services
  
  # Production resource configuration
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits:
      cpu: 500m
      memory: 512Mi
  
  # Node placement (optional)
  nodeSelector: {}
  tolerations: []
  affinity: {}
  
  # Log rotation configuration
  defaults:
    discovery:
      path: /pang/logs
      include: ["**/*.log", "**/*.out", "**/*.jsonl"]
      exclude: ["**/*.gz", "**/*.zip", "**/*.tmp", "**/*.idx", "**/.**", "**/*.sock", "**/*.fifo"]
      maxDepth: 8
    
    policy:
      size: 100Mi              # Rotate when file exceeds 100MB
      age: 24h                 # Rotate files older than 24 hours
      inactive: 6h             # Rotate inactive files after 6 hours
      keepFiles: 5             # Keep 5 rotated files per log
      keepDays: 7              # Keep files for 7 days maximum
      compressAfter: 1h        # Compress rotated files after 1 hour
      defaultMode: rename      # Use rename technique (safer)
    
    budgets:
      perNamespaceBytes: 10Gi  # 10GB storage limit per namespace
  
  # Environment-specific overrides
  overrides:
    namespaces:
      # Production namespace - frequent rotation, copytruncate for safety
      production:
        policy:
          size: 50Mi
          defaultMode: copytruncate
          compressAfter: 30m
        budgets:
          perNamespaceBytes: 20Gi
      
      # Staging namespace - similar to production
      staging:
        policy:
          size: 75Mi
          defaultMode: copytruncate
        budgets:
          perNamespaceBytes: 15Gi
      
      # Development namespace - less aggressive rotation
      development:
        policy:
          size: 200Mi
          keepFiles: 10
          keepDays: 14
        budgets:
          perNamespaceBytes: 5Gi
      
      # Monitoring namespace - high frequency logs
      monitoring:
        policy:
          size: 25Mi
          age: 6h
          compressAfter: 15m
        budgets:
          perNamespaceBytes: 50Gi
      
      # Database namespace - careful rotation
      database:
        policy:
          size: 500Mi
          defaultMode: copytruncate
          keepFiles: 10
          keepDays: 30
        budgets:
          perNamespaceBytes: 100Gi
    
    paths:
      # Legacy applications with specific requirements
      - match: "/pang/logs/legacy-app/**"
        policy:
          defaultMode: copytruncate
          size: 1Gi
          keepFiles: 20
        discovery:
          exclude: ["**/*.tmp", "**/*.lock"]
      
      # High-volume microservices
      - match: "/pang/logs/microservices/**"
        policy:
          size: 25Mi
          age: 2h
          compressAfter: 10m
        budgets:
          perNamespaceBytes: 30Gi

# Security configuration (production-ready)
securityContext:
  runAsNonRoot: true
  runAsUser: 65534
  runAsGroup: 65534
  fsGroup: 65534

# Enhanced service configuration for monitoring
service:
  labels: {}
    # Add any additional service labels for discovery if needed
    # monitoring: enabled

# Monitoring configuration - CRITICAL for Mimir integration
serviceMonitor:
  enabled: true               # FIXED: Enable ServiceMonitor (was disabled - main blocker!)
  interval: 30s
  scrapeTimeout: 10s
  honorLabels: false
  
  # PRODUCTION LABELS: Based on your Grafana Agent setup
  # Your cluster uses Grafana Agent for metrics collection
  labels:
    # Standard Kubernetes labels (matching your service pattern)
    app: rotator
    app.kubernetes.io/instance: rotator
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: rotator
    app.kubernetes.io/version: v1.1.0
    
    # Add any additional labels required by your Grafana Agent configuration
    # Check your mimir-monitoring-alloy ConfigMap for specific requirements:
    # kubectl get cm mimir-monitoring-alloy -o yaml
    
    # Common Grafana Agent labels (uncomment if needed):
    # grafana-agent: "true"
    # monitoring: "enabled"
    
  # Namespace selection (uncomment if Prometheus only scrapes specific namespaces)
  namespaceSelector: {}
    # matchNames:
    # - default
    # - monitoring
    # - kube-system
    # - production

# Priority class for important workloads
priorityClass:
  create: false
  name: system-node-critical  # Use existing system priority class

# Image pull secrets (if using private registry)
# imagePullSecrets:
#   - name: registry-secret

# =====================================================
# PRODUCTION DEPLOYMENT INSTRUCTIONS
# =====================================================
#
# 1. UPDATE REQUIRED VALUES:
#    - rotator.image.repository: your-registry/rotator
#    - rotator.image.tag: v1.1.0
#    - serviceMonitor.labels: (copy from node-exporter)
#
# 2. FIND PROMETHEUS LABELS:
#    kubectl get servicemonitor --all-namespaces -l app.kubernetes.io/name=node-exporter -o yaml | grep -A 10 "labels:"
#
# 3. PORT CONFIGURATION:
#    - Default: 9102 (standard exporter port)
#    - Alternative: 9090 (if your environment expects this)
#    - Set: rotator.metrics.port: 9090
#
# 4. DEPLOY COMMAND:
#    helm install rotator ./helm/rotator \
#      --namespace infrastructure \
#      --create-namespace \
#      -f production-values.yaml \
#      --set rotator.image.repository=your-registry/rotator \
#      --set rotator.image.tag=v1.1.0 \
#      --set serviceMonitor.labels.prometheus=your-prometheus-label \
#      --set serviceMonitor.labels.release=your-release-label
#
# 5. VERIFY DEPLOYMENT:
#    - Check pods: kubectl get pods -l app=rotator
#    - Check service: kubectl get service rotator
#    - Check ServiceMonitor: kubectl get servicemonitor rotator
#    - Test metrics: kubectl port-forward svc/rotator 9102:9102 && curl http://localhost:9102/metrics
#
# 6. VERIFY MIMIR INTEGRATION:
#    - Prometheus targets: kubectl port-forward svc/prometheus 9090:9090
#    - Visit: http://localhost:9090/targets (look for rotator)
#    - Query in Mimir: up{job=~".*rotator.*"}
#
# 7. MONITORING QUERIES:
#    - Health: up{job=~".*rotator.*"}
#    - Activity: rate(rotator_scan_cycles_total[5m])
#    - Files: rotator_files_discovered
#    - Rotations: rate(rotator_rotations_total[5m])
#    - Errors: rate(rotator_errors_total[5m])
#
# =====================================================
